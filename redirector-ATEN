#!/bin/sh

ATEN_guess()
{
    fgrep -q 'META NAME="ATEN International' $1
}

ATEN_session_open()
{
    local SID
    eval `$curl -f -c - -X POST \
         -d "name=$opt_user&pwd=$opt_passwd" \
         "https://$hostip/cgi/login.cgi" | parse_cookie`
    session=$SID
    [ "$session" != 'Failure_Login_IPMI_Then_LDAP_then_Active_Directory' ] || session=
}

ATEN_session_close()
{
    $curl -o /dev/null \
          -b "SID=$session" \
          "https://$hostip/cgi/logout.cgi"
}

ATEN_mc_info()
{
    # Get relevant info from ipmitool
    local mfg_id="$(ipmitool -U $opt_user -P $opt_passwd -I lanplus -H $hostip_nb mc info 2>&1 | $sed -n -e '/^Manufacturer\ ID/,/^Product\ ID/p')"
    eval `$curl -b "SID=$session" \
         -d "GENERIC_INFO.XML=(0,0)" \
         "https://$hostip/cgi/ipmi.cgi" | parse_xml`
    eval `$curl -b "SID=$session" \
         -d "Get_BoradID_XML.XML=(0,0)" \
         "https://$hostip/cgi/ipmi.cgi" | parse_xml`
    # power status
    eval `$curl -b "SID=$session" \
	 -d "POWER_INFO.XML=(0,0)" \
         "https://$hostip/cgi/ipmi.cgi" | parse_xml`
    # try to fetch BIOS info (for X10 models)
    eval `$curl -b "SID=$session" \
	 -d "Get_PlatformInfo.XML=(0,0)" \
	 "https://$hostip/cgi/ipmi.cgi" | parse_xml`
    # try to fetch POST CODE
    eval `$curl -b "SID=$session" \
	 -d "SNOOPING.XML=(0,0)" \
	 "https://$hostip/cgi/ipmi.cgi" | parse_xml`
    cat <<EOF
BMC Firmware Revision     : $(echo $GENERIC_IPMIFW_VERSION | $sed 's,\(..\),\1.,' | xargs printf "%.2f")
BMC Firmware Tag          : $GENERIC_IPMIFW_TAG
BMC Build Time            : $GENERIC_IPMIFW_BLDTIME
BMC Kernel Version        : $KERNAL_VERSION
EOF
    local bios="N/A"
    local biosdate="N/A"
    if [ -n "$PLATFORM_INFO_BIOS_VERSION" -a "$PLATFORM_INFO_BIOS_VERSION" != ' ' ]; then
	    bios="$PLATFORM_INFO_BIOS_VERSION"
	    biosdate="$PLATFORM_INFO_BIOS_BUILD_DATE"
    fi
    if [ -n "$BIOS_VERSION" -a "$BIOS_VERSION" != ' ' ]; then
	    bios="$BIOS_VERSION"
	    biosdate="$PLATFORM_INFO_BIOS_BUILD_DATE"
    fi
    [ -n "$REDFISH_REV" ] || \
	    REDFISH_REV=$($curl -f https://$hostip/redfish/v1/|jq -r .RedfishVersion -)
    [ -z "$REDFISH_REV" -o "$REDFISH_REV" == 'null' ] && REDFISH_REV=N/A
    [ -n "$PLATFORM_INFO_CPLD_REV" ] || PLATFORM_INFO_CPLD_REV='N/A'
    cat <<EOF
Platform BIOS Version     : $bios
Platform BIOS Build Time  : $biosdate
Platform BIOS POST code   : ${POST_CODE:-N/A}
Platform CPLD Version     : ${PLATFORM_INFO_CPLD_VERSION:-$PLATFORM_INFO_CPLD_REV}
Platform EC Version       : ${PLATFORM_INFO_EC_VERSION:-N/A}
Platform RedFish Version  : ${PLATFORM_INFO_REDFISH_REV:-$REDFISH_REV}
Platform Power status     : ${POWER_STATUS:-N/A}
$mfg_id
Product Name              : Unknown (0x$BoardID_ID)
EOF
}

ATEN_mc_reset_cold()
{
    $curl -o /dev/null \
          -b "SID=$session" \
          "https://$hostip/cgi/BMCReset.cgi"
}

ATEN_chk_jnlp()
{
    grep -q '<jnlp spec=".*" codebase=' "$1"
}

ATEN_kvm()
{
    $curl -f -o "$1" \
		  -b "SID=$session" \
		  "https://$hostip/cgi/Build_jnlp.cgi" && ATEN_chk_jnlp "$1" ||
	$curl -f -o "$1" \
		  -b "SID=$session" \
		  "https://$hostip/jnlp/sess_${session}.jnlp" && ATEN_chk_jnlp "$1" ||
	$curl -f -o "$1" \
		  -b "SID=$session" \
                  -H "Referer: https://$hostip/cgi/url_redirect.cgi?url_name=man_ikvm" \
		  "https://$hostip/cgi/url_redirect.cgi?url_name=sess_${session}&url_type=jwsk" && ATEN_chk_jnlp "$1" ||
        $curl -f -o "$1" \
                  -b "SID=$session" \
                  -H "Referer: https://$hostip/cgi/url_redirect.cgi?url_name=man_ikvm" \
                  "https://$hostip/cgi/url_redirect.cgi?url_name=ikvm&url_type=jwsk" && ATEN_chk_jnlp "$1" || return $?

}

ATEN_redirect()
{
    local s rc=0
    case "$2" in
    cdrom)
        ATEN_kvm "$1" || rc=$?
        [ "$rc" -eq 0 -o "$rc" -eq 18 ] || return $rc
        s=$($stat $3)
        cnt="$($sed -n 's,[[:space:]]*<argument>\([^<]\+\)</argument>,\1,p' "$1" | wc -l)"
        rev=r1
        [ "$cnt" -ne 8 ] || rev=r2
        $sed -n 's,[[:space:]]*<argument>\([^<]\+\)</argument>,\1,p' "$1" | tr '\n' ' ' |
            $sed "s,^,$3 $(((s - (s * 277) / 10000) / 1024)) $opt_timeout $rev ," |
                timeout_pass -9 $((opt_timeout * 60 + 15)) java -cp $java_path/redirector.jar com.redirector.ATEN.kvm.Redirector
        ;;
    *)
        error "Redirection for $2 not supported"
        ;;
    esac
}

ATEN_sol()
{
    ipmitool -I lanplus -H $hostip_nb -p 623 -U $opt_user -P $opt_passwd sol activate
}

ATEN_lan_print()
{
    # CONFIG_INFO.XML
    # CONFIG_IPV6.XML
    ipmitool -U $opt_user -P $opt_passwd -I lanplus -H $hostip_nb lan print
}

ATEN_lan_set()
{
    local fmt='+%a%%20%b%%20%d%%20%Y%%20%T%%20GMT%z%%20(%Z)'
    local cnt=0

    case "$1" in
    fwup) shift
        [ -n "$1" ] || error "Image file not specified"
        [ -e "$1" ] || error "File \`$1' not exists"
        local cookies="langSetFlag=0;language=English;SID=$session;mainpage=maintenance;subpage=main_fw_update"
        local get="$curl -b $cookies https://$hostip"
        echo -n "Preparing BMC to flash [$session]..."
	$get/cgi/ipmi.cgi -d "LOCK_UPLOAD_FW.XML=(0,0)&time_stamp=$(LC_ALL=C date "$fmt")" | fgrep -q 'RES="1"' && echo done || error failed
        echo -n "Uploading image..."
	$get/cgi/oem_firmware_upload.cgi -m 300 -H 'Expect:' -f -F "\"form1\"=@$1;filename=\"$(basename $1)\";type=application/octet-stream" | fgrep -q 'btn_upgrade' && echo done || error failed
	replace=`$get/cgi/ipmi.cgi -d "UPLOAD_FW_VERSION.XML=(0,0)&time_stamp=$(LC_ALL=C date "$fmt")" | $sed -n 's,.*FW_VERSION\ \(NEW=.*"\)\/.*,\1,p'` || error failed
	if [ -n "$replace" ]; then
		new=${replace%% OLD=*}
		old=${replace##*OLD=}
		new=${new#NEW=}
		if [ "$new" == "$old" ]; then
                       echo "BMC versions are the same, exiting..."
			echo -n "Rebooting BMC..."
			ATEN_mc_reset_cold && echo "done" || error failed
			session=
			return 1
		else
			echo "Going to replace fw $old -> $new..."
		fi
	else
		echo "Unable to guess BMC version, exiting..."
                echo -n "Rebooting BMC..."
		ATEN_mc_reset_cold && echo "done" || error failed
		session=
		return 1
	fi
	echo "Flashing..."
	fwreply=`$get/cgi/oem_firmware_update.cgi -m 5 -d "preserve_config=1&preserve_sdr=1&timeStamp=$(LC_ALL=C date "$fmt")" ||:`
	[ -n "$fwreply" ] || error 'startflash failed'
	case "$fwreply" in
		ok) percent=`$get/cgi/upgrade_process.cgi -d "fwtype=0&time_stamp=$(LC_ALL=C date "$fmt")" | $sed -n 's,.*<percent>\([0-9 ]\+\)</percent>,\1,p'` ||:
		    printf "\rCompleted %s%%" "$percent"
			;;
		 *) error 'startflash falied'
			;;
	esac
	while sleep 5; do
            percent=`$get/cgi/upgrade_process.cgi -d "fwtype=0&time_stamp=$(LC_ALL=C date "$fmt")" | $sed -n 's,.*<percent>\([0-9 ]\+\)</percent>,\1,p'` ||:
            printf "\rCompleted %s%%" "$percent"
            [ "$percent" != 100 ] || break
            cnt=$((cnt+1))
            [ "$cnt" -lt 15 ] || [ -n "$percent" -o "$percent" -ne 0 ] || error failed
        done
        printf "\nFlash complete. Rebooting...\n"
        session=
        ;;
     biosup) shift
        [ -n "$1" ] || error "BIOS file not specified"
        [ -e "$1" ] || error "File \`$1' not exists"
        local cookies="langSetFlag=0;language=English;SID=$session;mainpage=maintenance;subpage=main_bios_upload"
        local get="$curl -b $cookies https://$hostip"
        echo -n "Preparing BMC to flash [$session]..."
	$get/cgi/ipmi.cgi -d "BIOS_UPDATE_MISC.XML=(0,0)&time_stamp=$(LC_ALL=C date "$fmt")" | fgrep -q 'RES="-1"' && echo done || error failed
	echo -n "Locking firmware for update..."
	$get/cgi/ipmi.cgi -d "BIOS_UPLOAD.XML=(0,0)&time_stamp=$(LC_ALL=C date "$fmt")" | fgrep -q 'RES="1"' && echo done || error failed
        echo -n "Uploading image..."
	$get/cgi/bios_upload.cgi -m 300 -H 'Expect:' -f -F "\"form1\"=@$1;filename=\"$(basename $1)\";type=application/octet-stream" | fgrep -q 'btn_upgrade' && echo done || error failed
	$get/cgi/ipmi.cgi -d "BIOS_UPDATE_CHECK.XML=(0,0)&time_stamp=$(LC_ALL=C date "$fmt")" | fgrep -q 'RES="00"' || error 'Update check failed'
	biosreplace=`$get/cgi/ipmi.cgi -d "BIOS_REV.XML=&time_stamp=$(LC_ALL=C date "$fmt")"|$sed -n -e '/BIOS_Rev/,/\/>/s,.*\ OldRev\=\([^N]\+\).*NewRev\=\([^>]\+\)\/>.*,Old=\1 New=\2,gp'`
	if [ -n "$biosreplace" ]; then
		new=${biosreplace##*New=}
		old=${biosreplace%%  New=*}
		old=${old##Old=}
		if [ "$new" == "$old" ]; then
                       echo "BIOS versions are the same, exiting..."
			echo -n "Rebooting BMC..."
			ATEN_mc_reset_cold && echo "done" || error failed
			session=
			return 1
		else
			echo "Going to replace |$old| -> |$new|..."
		fi
	else
		echo "Unable to guess BIOS version, exiting..."
                echo -n "Rebooting BMC..."
		ATEN_mc_reset_cold && echo "done" || error failed
		session=
		return 1
	fi
	echo -n "Setting flash options..."
	$get/cgi/ipmi.cgi -d "BIOS_OPTION.XML=&me_en=1&nve_en=1&time_stamp=$(LC_ALL=C date "$fmt")" | fgrep -q 'Res="3"' || error failed
	# ensure that process is locked
	$get/cgi/ipmi.cgi -d "BIOS_UPDATE_MISC.XML=(0,0)&time_stamp=$(LC_ALL=C date "$fmt")" | fgrep -q 'RES="-1"' && echo done || error failed
	echo "Flashing..."
	$get/cgi/bios_update.cgi -m 5 -d "timeStamp=$(LC_ALL=C date "$fmt")" ||:
        # sometimes there is no 'ok' in reply to blindly poll for progress status (
	while sleep 5; do
            percent=`$get/cgi/upgrade_process.cgi -d "fwtype=1&time_stamp=$(LC_ALL=C date "$fmt")" | $sed -n 's,.*<percent>\([0-9 ]\+\)</percent>,\1,p'` ||:
            printf "\rCompleted %s%%" "$percent"
            [ "$percent" != 100 ] || break
            cnt=$((cnt+1))
            [ "$cnt" -lt 15 ] || [ -n "$percent" -o "$percent" -ne 0 ] || error failed
        done
        printf "\nFlash complete. Finalizing things...\n"
	$get/cgi/ipmi.cgi -d "BIOS_UPDATE_DONE.XML=(1,0)&time_stamp=$(LC_ALL=C date "$fmt")" ||:
        $get/cgi/ipmi.cgi -d "POWER_INFO.XML=(0,0)&time_stamp=$(LC_ALL=C date "$fmt")" | fgrep -q 'POWER STATUS="ON"' || error 'Failed to get power state'
	echo -n "Unlocking UI..."
	$get/cgi/ipmi.cgi -d "BIOS_UPDATE_MISC.XML=(1,0)&time_stamp$(LC_ALL=C date "$fmt")" | fgrep -q 'RES="0"' && echo done || error failed
	echo "Rebooting the system..."
	$get/cgi/ipmi.cgi -d "POWER_INFO.XML=(1,2)&time_stamp$(LC_ALL=C date "$fmt")" | fgrep -q 'POWER STATUS="ON"' \
		          && echo 'Please wait up to 5min to complete boot cycle' ||:
	session=
        ;;
    esac
}
